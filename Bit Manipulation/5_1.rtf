{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red127\green0\blue85;\red42\green0\blue255;
\red0\green80\blue50;\red100\green40\blue128;}
\margl1440\margr1440\vieww28300\viewh14680\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 //Algorithm :   Mask : Use the difference between start and end positions to calculate \cf0 \
\cf2 //              the power of 2. Subtract 1 from this number so you get as many 1's \cf0 \
\cf2 //              as start-end+1. Shift this start times and invert. You now have 0's\cf0 \
\cf2 //              between the start and end position.\cf0 \
\cf2 //              Clear : mask & input integer\cf0 \
\cf2 //              Generate Output : Shift the number to be inserted start times and 'or' it\cf0 \
\cf2 //              with the masked input integer.\
//Assumption : start = where the LSB of the mask (i). end = where the MSB of the mask (j)\
//			\cf0 \
\
\pard\pardeftab720

\f1\b \cf3 using
\f0\b0 \cf0  
\f1\b \cf3 namespace
\f0\b0 \cf0  std;\

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <iostream>\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <bitset>\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <math.h>\cf0 \
\

\f1\b \cf3 class
\f0\b0 \cf0  \cf5 myClass\cf0  \{\
    
\f1\b \cf3 public
\f0\b0 \cf0  : \
        
\f1\b \cf3 int
\f0\b0 \cf0  
\f1\b Insertion
\f0\b0 (
\f1\b \cf3 int
\f0\b0 \cf0  insertInto, 
\f1\b \cf3 int
\f0\b0 \cf0  insert, 
\f1\b \cf3 int
\f0\b0 \cf0  start, 
\f1\b \cf3 int
\f0\b0 \cf0  end);\
\};\
\

\f1\b \cf3 int
\f0\b0 \cf0  
\f1\b myClass :: Insertion
\f0\b0 (
\f1\b \cf3 int
\f0\b0 \cf0  insertInto, 
\f1\b \cf3 int
\f0\b0 \cf0  insert, 
\f1\b \cf3 int
\f0\b0 \cf0  start, 
\f1\b \cf3 int
\f0\b0 \cf0  end) \{\
    
\f1\b \cf3 int
\f0\b0 \cf0  power = end - start + 1; \
    
\f1\b \cf3 int
\f0\b0 \cf0  mask = 
\f1\b \cf6 pow
\f0\b0 \cf0 (2, power) - 1;\
    cout << \cf4 "Start position is "\cf0  << start << \cf4 " and end position is "\cf0  << end << endl;\
    cout << \cf4 "Mask is "\cf0  << \cf5 bitset\cf0 <32>(mask) << endl;\
    mask = mask << start;\
    cout << \cf4 "Shifted mask is "\cf0  << \cf5 bitset\cf0 <32>(mask) << endl;\
    mask = ~mask;\
    cout << \cf4 "Actual mask is "\cf0  << \cf5 bitset\cf0 <32>(mask) << endl;\
    \
    cout << \cf4 "insertInto = "\cf0  << \cf5 bitset\cf0 <32>(insertInto) << \cf4 " and insert is "\cf0  << \cf5 bitset\cf0 <32>(insert) << endl;\
    insertInto = insertInto & mask;\
    cout << \cf4 "Masked insertInto is "\cf0  << \cf5 bitset\cf0 <32>(insertInto) << endl;\
    \
    insertInto = insertInto | (insert << start);\
    cout << \cf4 "Final result "\cf0  << \cf5 bitset\cf0 <32>(insertInto) << endl;\
    
\f1\b \cf3 return
\f0\b0 \cf0 (insertInto);\
\}\
\

\f1\b \cf3 int
\f0\b0 \cf0  
\f1\b main
\f0\b0 () \{\
    \
    \cf5 myClass\cf0  obj;\
    
\f1\b \cf3 int
\f0\b0 \cf0  res = obj.Insertion(154, 7, 2, 7);\
    
\f1\b \cf3 return
\f0\b0 \cf0  0;\
\}\
}