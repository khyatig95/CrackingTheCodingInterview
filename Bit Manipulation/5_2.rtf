{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red127\green0\blue85;\red42\green0\blue255;
\red0\green80\blue50;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 //Assumption :  Real number should be between 0 and 1. The 32 bits include the 0. for \cf0 \
\cf2 //              representation.\cf0 \
\cf2 //Algorithm :   Multiply real with 2 repeatedly. If number is greater than 1,\cf0 \
\cf2 //              append 1 in string else 0. Subtract 1 from \cf2 \ul \ulc2 num\cf2 \ulnone  if it is greater than 1\cf0 \
\cf2 //              Break loop is \cf2 \ul \ulc2 num\cf2 \ulnone  becomes equal to 0 or if string size > 32\cf0 \
\
\pard\pardeftab720

\f1\b \cf3 using
\f0\b0 \cf0  
\f1\b \cf3 namespace
\f0\b0 \cf0  std;\

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <iostream>\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <bitset>\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <string>\cf0 \
\

\f1\b \cf3 class
\f0\b0 \cf0  \cf5 myClass\cf0  \{\
    
\f1\b \cf3 public
\f0\b0 \cf0  : \
        
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b BinaryToString
\f0\b0 (
\f1\b \cf3 double
\f0\b0 \cf0  num);\
\};\
\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b myClass :: BinaryToString
\f0\b0 (
\f1\b \cf3 double
\f0\b0 \cf0  num) \{\
    \cf5 string\cf0  Result;\
    
\f1\b \cf3 double
\f0\b0 \cf0  val = num;\
    Result.push_back(\cf4 '0'\cf0 );\
    Result.push_back(\cf4 '.'\cf0 );\
    
\f1\b \cf3 while
\f0\b0 \cf0  (val != 0) \{\
        cout << \cf4 "\cf4 \ul \ulc4 Val\cf4 \ulnone  is "\cf0  << val << endl;\
        val = val*2;\
        
\f1\b \cf3 if
\f0\b0 \cf0  (val >= 1) \{\
            Result.push_back(\cf4 '1'\cf0 );\
            val = val-1; \cf2 //Only need decimal part\cf0 \
        \} 
\f1\b \cf3 else
\f0\b0 \cf0  \
            Result.push_back(\cf4 '0'\cf0 );\
        
\f1\b \cf3 if
\f0\b0 \cf0  (Result.size() == 32) \{\
            cout << \cf4 "ERROR: real number needs more than 32 bits"\cf0  << endl;\
            cout << \cf4 "Binary representation of "\cf0  << num << \cf4 " so far is "\cf0  << Result << endl;\
            
\f1\b \cf3 return
\f0\b0 \cf0 ;\
        \}\
    \}\
    cout << \cf4 "Binary representation of "\cf0  << num << \cf4 " is "\cf0  << Result << endl;\
\}\
\
\

\f1\b \cf3 int
\f0\b0 \cf0  
\f1\b main
\f0\b0 () \{\
    \
    \cf5 myClass\cf0  obj;\
    obj.BinaryToString(0.72);\
    
\f1\b \cf3 return
\f0\b0 \cf0  0;\
\}\
}