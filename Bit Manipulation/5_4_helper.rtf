{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red42\green0\blue255;\red0\green80\blue50;
\red0\green0\blue192;\red100\green40\blue128;\red63\green127\blue95;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs24 \cf2 #include
\f1\b0 \cf0  \cf3 <iostream>\cf0 \

\f0\b \cf2 using
\f1\b0 \cf0  
\f0\b \cf2 namespace
\f1\b0 \cf0  std;\

\f0\b \cf2 #include
\f1\b0 \cf0  \cf3 <vector>\cf0 \

\f0\b \cf2 #include
\f1\b0 \cf0  \cf3 <math.h>\cf0 \

\f0\b \cf2 #include
\f1\b0 \cf0  \cf3 <bitset>\cf0 \
\

\f0\b \cf2 class
\f1\b0 \cf0  \cf4 helper\cf0  \{\
    
\f0\b \cf2 public
\f1\b0 \cf0  :\
        
\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b createCountArray
\f1\b0 (
\f0\b \cf2 int
\f1\b0 \cf0  num);\
        \cf4 vector\cf0 <
\f0\b \cf2 int
\f1\b0 \cf0 > \cf5 vec\cf0 ;\
\};\
\

\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b helper :: createCountArray
\f1\b0 (
\f0\b \cf2 int
\f1\b0 \cf0  num) \{\
    
\f0\b \cf2 int
\f1\b0 \cf0  count = 0;\
    
\f0\b \cf2 int
\f1\b0 \cf0  val = num;\
    
\f0\b \cf2 int
\f1\b0 \cf0  check;\
    
\f0\b \cf2 bool
\f1\b0 \cf0  pushDone = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
    
\f0\b \cf2 int
\f1\b0 \cf0  totalCount = 0;\
    
\f0\b \cf2 bool
\f1\b0 \cf0  reverse = (num<0) ? 
\f0\b \cf2 true
\f1\b0 \cf0  : 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
    
\f0\b \cf2 int
\f1\b0 \cf0  mask = reverse ? 
\f0\b \cf6 pow
\f1\b0 \cf0 (2,31) : 1;\
    
\f0\b \cf2 int
\f1\b0 \cf0  findZero = reverse ? mask : 0;\
\
    
\f0\b \cf2 while
\f1\b0 \cf0  ((val != 0) || !pushDone) \{\
        check = val&mask;\
        \cf7 //\cf7 \ul \ulc7 cout\cf7 \ulnone  << "\cf7 \ul \ulc7 num\cf7 \ulnone  : " << \cf7 \ul \ulc7 bitset\cf7 \ulnone <32>(\cf7 \ul \ulc7 val\cf7 \ulnone ) << " for findZero : " << findZero << " and \cf7 \ul \ulc7 val\cf7 \ulnone &mask : " << \cf7 \ul \ulc7 bitset\cf7 \ulnone <32>(check) << " with count " << count << \cf7 \ul \ulc7 endl\cf7 \ulnone ;\cf0 \
        
\f0\b \cf2 if
\f1\b0 \cf0  (check == findZero) \{\
            count++;\
            val = reverse ? val << 1 : val >> 1; \cf7 //For negative numbers, right shift is undefined\cf0 \
            pushDone = 
\f0\b \cf2 false
\f1\b0 \cf0 ;\
            totalCount++;\
        \} 
\f0\b \cf2 else
\f1\b0 \cf0  \{\
            \cf5 vec\cf0 .push_back(count);\
            
\f0\b \cf2 if
\f1\b0 \cf0  (findZero == 0)\
                findZero = reverse ? mask : 1;\
            
\f0\b \cf2 else
\f1\b0 \cf0 \
                findZero = 0;\
            count = 0;\
            pushDone = 
\f0\b \cf2 true
\f1\b0 \cf0 ;\
        \}\
    \}\
    \cf5 vec\cf0 .push_back(32-totalCount);\
    
\f0\b \cf2 if
\f1\b0 \cf0  (reverse) \{\
        cout << \cf3 "Reverse Count array for integer : "\cf0  << \cf4 bitset\cf0 <32>(num) << \cf3 " is : "\cf0  << endl;\
        
\f0\b \cf2 for
\f1\b0 \cf0  (
\f0\b \cf2 auto
\f1\b0 \cf0  itr = \cf5 vec\cf0 .begin(); itr!= \cf5 vec\cf0 .end(); ++itr )\
            cout << *itr << \cf3 " "\cf0 ;\
        cout << endl;\
        \cf4 vector\cf0 <
\f0\b \cf2 int
\f1\b0 \cf0 > rev_vec;\
        
\f0\b \cf2 for
\f1\b0 \cf0  (
\f0\b \cf2 auto
\f1\b0 \cf0  itr=\cf5 vec\cf0 .rbegin(); itr!=\cf5 vec\cf0 .rend(); ++itr)\
            rev_vec.push_back(*itr); \cf7 //Reverse the vector\cf0 \
        \cf5 vec\cf0  = rev_vec;\
        \cf5 vec\cf0 .push_back(0); \cf7 //As negative numbers have 1 in MSB\cf0 \
    \}\
    cout << \cf3 "Count array for integer : "\cf0  << \cf4 bitset\cf0 <32>(num) << \cf3 " is : "\cf0  << endl;\
    
\f0\b \cf2 for
\f1\b0 \cf0  (
\f0\b \cf2 auto
\f1\b0 \cf0  itr = \cf5 vec\cf0 .begin(); itr!= \cf5 vec\cf0 .end(); ++itr )\
        cout << *itr << \cf3 " "\cf0 ;\
    cout << endl;\
\}\
}