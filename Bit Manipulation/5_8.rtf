{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red127\green0\blue85;\red42\green0\blue255;
\red0\green80\blue50;\red0\green0\blue192;\red100\green40\blue128;}
\margl1440\margr1440\vieww28300\viewh14680\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 //Assumption :  To \cf2 \ul \ulc2 accomodate\cf2 \ulnone  array of 1 byte, we use char array\cf0 \
\cf2 //Algorithm :   DrawLine :  Since x1 and x2 may be multiple bytes apart, find \cf0 \
\cf2 //              how far apart they are by calculating their byte id.\cf0 \
\cf2 //              Set whole bytes to 1. Then work on the individual bytes of x1 \cf0 \
\cf2 //              and x2 to set the individual bits in their bytes to 1.\cf0 \
\
\pard\pardeftab720

\f1\b \cf3 using
\f0\b0 \cf0  
\f1\b \cf3 namespace
\f0\b0 \cf0  std;\

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <iostream>\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <bitset>\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <vector>\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <math.h>\cf0 \

\f1\b \cf3 #define
\f0\b0 \cf0  W 4\
\

\f1\b \cf3 class
\f0\b0 \cf0  \cf5 myClass\cf0  \{\
    
\f1\b \cf3 public
\f0\b0 \cf0  :\
        
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b DrawLine
\f0\b0 (
\f1\b \cf3 int
\f0\b0 \cf0  x1, 
\f1\b \cf3 int
\f0\b0 \cf0  x2, 
\f1\b \cf3 int
\f0\b0 \cf0  y);\
    
\f1\b \cf3 private
\f0\b0 \cf0  :\
        \cf5 uint8_t\cf0  \cf6 arr\cf0 [16] = \{0\};\
\};\
\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b myClass :: DrawLine
\f0\b0 (
\f1\b \cf3 int
\f0\b0 \cf0  x1, 
\f1\b \cf3 int
\f0\b0 \cf0  x2, 
\f1\b \cf3 int
\f0\b0 \cf0  y) \{\
    
\f1\b \cf3 if
\f0\b0 \cf0  (x1 > W*8 || x2 > W*8 || y > W || x1 > x2) \{\
        cout << \cf4 "ERROR: Coordinates specified are out of range!"\cf0  << endl;\
        
\f1\b \cf3 return
\f0\b0 \cf0 ;\
    \}\
    
\f1\b \cf3 int
\f0\b0 \cf0  start = y*W + (x1/8);\
    
\f1\b \cf3 int
\f0\b0 \cf0  last = y*W + (x2/8);\
    \cf5 uint8_t\cf0  val = 0;\
    
\f1\b \cf3 int
\f0\b0 \cf0  super;\
    
\f1\b \cf3 int
\f0\b0 \cf0  shift;\
    cout << \cf4 "Start is "\cf0  << start << \cf4 " and last is "\cf0  << last << endl;\
    
\f1\b \cf3 if
\f0\b0 \cf0  (start == last) \{ \cf2 //Both x1 and x2 are in the same byte\cf0 \
        val = 
\f1\b \cf7 pow
\f0\b0 \cf0 (2, x2-x1) - 1;\
        \cf6 arr\cf0 [start] = val >> x1;\
    \} 
\f1\b \cf3 else
\f0\b0 \cf0  \{\
        
\f1\b \cf3 if
\f0\b0 \cf0  (x1%8 != 0) \{\
            super = 8 - (x1%8);\
            val = 
\f1\b \cf7 pow
\f0\b0 \cf0 (2, super)-1;\
            \cf6 arr\cf0 [start] = val;\
            start++;\
        \}\
        \cf2 //x2 : You can also generate as many 1's as 0's and then just flip. No shift needed\cf0 \
        shift = 7 - x2%8;\
        super = 8 - shift;\
        val = 
\f1\b \cf7 pow
\f0\b0 \cf0 (2, super) - 1;\
        val = val << shift;\
        \cf6 arr\cf0 [last] = val;\
        last--;\
        \
        
\f1\b \cf3 for
\f0\b0 \cf0  (
\f1\b \cf3 int
\f0\b0 \cf0  i=start; i<=last; i++)\
            \cf6 arr\cf0 [i] = -1; \cf2 //All ones\cf0 \
    \}\
    \
    
\f1\b \cf3 for
\f0\b0 \cf0  (
\f1\b \cf3 int
\f0\b0 \cf0  i=0; i<16; i++) \{\
        
\f1\b \cf3 if
\f0\b0 \cf0  (i%W == 0)\
            cout << endl;\
        cout << \cf5 bitset\cf0 <8>(\cf6 arr\cf0 [i]) << \cf4 "t"\cf0 ;\
    \}\
    cout << endl;\
\}\
\

\f1\b \cf3 int
\f0\b0 \cf0  
\f1\b main
\f0\b0 () \{\
    \
    \cf5 myClass\cf0  obj;\
    
\f1\b \cf3 int
\f0\b0 \cf0  x1 = 8;\
    
\f1\b \cf3 int
\f0\b0 \cf0  x2 = 16;\
    
\f1\b \cf3 int
\f0\b0 \cf0  y = 2;\
    cout << \cf4 "x1 = "\cf0  << x1 << \cf4 " x2 = "\cf0  << x2 << \cf4 " y = "\cf0  << y << endl;\
    obj.DrawLine(x1, x2, y);\
\
    
\f1\b \cf3 return
\f0\b0 \cf0  0;\
\}\
}