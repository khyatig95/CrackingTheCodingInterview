{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red127\green0\blue85;\red42\green0\blue255;
\red100\green70\blue50;\red0\green80\blue50;\red0\green0\blue192;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 //Algorithm  :  haveLoop : If fast intersects slow where fast is 2x faster than slow\cf0 \
\cf2 //              findLoop : The place where slow==fast, move one pointer at head and\cf0 \
\cf2 //              then move both till they intersect again. That is the loop. \cf0 \
\cf2 //              (The place where they intersect is "K" nodes away from the starting of the loop\cf0 \
\cf2 //              where K is the no. of nodes before the loop)\cf0 \
\cf2 //              Time Complexity : O(N) where N is length of longer list; \cf0 \
\cf2 //              Space Complexity : O(1)\cf0 \
\
\pard\pardeftab720

\f1\b \cf3 using
\f0\b0 \cf0  
\f1\b \cf3 namespace
\f0\b0 \cf0  std;\

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <iostream>\cf0 \
\pard\pardeftab720

\f1\b \cf3 \ul \ulc3 #include
\f0\b0 \cf0 \ulc0  \cf4 \ulc4 "LinkedList.h"\cf0 \ulnone \
\
\pard\pardeftab720

\f1\b \cf3 template
\f0\b0 \cf0  <
\f1\b \cf3 typename
\f0\b0 \cf0  
\f1\b \cf5 T
\f0\b0 \cf0 >\

\f1\b \cf3 class
\f0\b0 \cf0  \cf6 myClass\cf0  \{\
    
\f1\b \cf3 public
\f0\b0 \cf0  :\
            
\f1\b \cf3 bool
\f0\b0 \cf0  
\f1\b hasLoop
\f0\b0 (\ul LinkedList<
\f1\b \cf5 \ulc5 T
\f0\b0 \cf0 \ulc0 >\ulnone  lis);\
            \ul Node<
\f1\b \cf5 \ulc5 T
\f0\b0 \cf0 \ulc0 >\ulnone * \cf7 loop\cf0  = NULL;\
\};\
\

\f1\b \cf3 template
\f0\b0 \cf0  <
\f1\b \cf3 typename
\f0\b0 \cf0  
\f1\b \cf5 T
\f0\b0 \cf0 >\

\f1\b \cf3 bool
\f0\b0 \cf0  
\f1\b myClass<T> :: hasLoop
\f0\b0 (\ul LinkedList<
\f1\b \cf5 \ulc5 T
\f0\b0 \cf0 \ulc0 >\ulnone  lis) \{\
    \ul Node<
\f1\b \cf5 \ulc5 T
\f0\b0 \cf0 \ulc0 >\ulnone * fast = lis.\ul head\ulnone ;\
    \ul Node<
\f1\b \cf5 \ulc5 T
\f0\b0 \cf0 \ulc0 >\ulnone * slow = lis.\ul head\ulnone ;\
    
\f1\b \cf3 bool
\f0\b0 \cf0  skip = 
\f1\b \cf3 true
\f0\b0 \cf0 ;\
\
    
\f1\b \cf3 while
\f0\b0 \cf0  (fast->\ul next\ulnone  != NULL) \{ \cf2 //Compare nodes, not data!!!\cf0 \
        cout << \cf4 "Fast is "\cf0  << fast->\ul data\ulnone  << \cf4 " and slow is "\cf0  << slow->\ul data\ulnone  << \ul endl\ulnone ;\
        
\f1\b \cf3 if
\f0\b0 \cf0  (!skip)\
            slow = slow->\ul next\ulnone ;\
        skip = !skip;\
        fast = fast->\ul next\ulnone ;\
        
\f1\b \cf3 if
\f0\b0 \cf0  (fast == slow) \
            
\f1\b \cf3 break
\f0\b0 \cf0 ;\
    \}\
    
\f1\b \cf3 if
\f0\b0 \cf0  (fast->\ul next\ulnone  == NULL) \{\
        cout << \cf4 "List has an end"\cf0  << endl;\
        
\f1\b \cf3 return
\f0\b0 \cf0  
\f1\b \cf3 false
\f0\b0 \cf0 ;\
    \} \
    fast = lis.\ul head\ulnone ;\
    slow = slow->\ul next\ulnone ;\
    
\f1\b \cf3 while
\f0\b0 \cf0  (fast != slow) \{\
        cout << \cf4 "Fast is "\cf0  << fast->\ul data\ulnone  << \cf4 " and slow is "\cf0  << slow->\ul data\ulnone  << \ul endl\ulnone ;\
        fast = fast->\ul next\ulnone ;\
        slow = slow->\ul next\ulnone ;\
    \}\
    \cf7 loop\cf0  = fast;\
    
\f1\b \cf3 return
\f0\b0 \cf0  
\f1\b \cf3 true
\f0\b0 \cf0 ;\
\}\
\

\f1\b \cf3 int
\f0\b0 \cf0  
\f1\b main
\f0\b0 () \{\
    \
    \ul LinkedList<
\f1\b \cf3 \ulc3 int
\f0\b0 \cf0 \ulc0 >\ulnone  lis1; \
    \cf6 myClass\cf0 <
\f1\b \cf3 int
\f0\b0 \cf0 > obj;\
    lis1.\ul insertNode\ulnone (1);\
    lis1.\ul insertNode\ulnone (2);\
    lis1.\ul insertNode\ulnone (7);\
    lis1.\ul insertNode\ulnone (9);  \
    lis1.\ul insertNode\ulnone (5);  \
    lis1.\ul insertNode\ulnone (34);\
    lis1.\ul insertNode\ulnone (3); \
    
\f1\b \cf3 if
\f0\b0 \cf0  (lis1.\ul head\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone  == NULL) \
        lis1.\ul head\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone ->\ul next\ulnone  = lis1.\ul head\ulnone ->\ul next\ulnone ->\ul next\ulnone ;\
    \
    \cf2 //\cf2 \ul \ulc2 cout\cf2 \ulnone  << "List1:" << \cf2 \ul \ulc2 endl\cf2 \ulnone ;\cf0 \
    \cf2 //lis1.printLinkedList();\cf0 \
    \
    
\f1\b \cf3 if
\f0\b0 \cf0  (obj.hasLoop(lis1)) \{\
        cout << \cf4 "List has Loop"\cf0  << endl;\
        cout << \cf4 "Intersection at "\cf0  << obj.\cf7 loop\cf0 ->\ul data\ulnone  << \ul endl\ulnone ;\
    \} 
\f1\b \cf3 else
\f0\b0 \cf0  \
        cout << \cf4 "List does NOT have Loop"\cf0  << endl;\
    
\f1\b \cf3 return
\f0\b0 \cf0  0;\
\}\
}